---
- name: Create a VPC
  ec2_vpc_net:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "{{ vpc_name }}" 
    cidr_block: "{{ vpcCidrBlock }}"
    region: "{{ region }}"
    # enable dns support 
    dns_support: yes
    # enable dns hostnames
    dns_hostnames: yes
    tenancy: default
    state: "{{ state }}"
  register: ec2_vpc_net_result

- name: create ec2 vpc internet gateway       
  # create an internet gateway for the vpc
  ec2_vpc_igw:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ region }}"
    state: "{{ state }}" 
    tags:
      Name: "{{ igw_name }}"
  register: igw_result

- name: create ec2 vpc subnet
  # create the subnet for the vpc with a cidr block
  ec2_vpc_subnet:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ region }}"
    az: "{{ zone }}"      # az is the availability zone
    state: "{{ state }}"
    cidr: "{{ subNetCidrBlock }}"
    # enable public ip
    map_public: yes
    resource_tags:
      Name: "{{ subnet_name }}"
  register: subnet_result

- name: create ec2 security group
  # create a security group for the vpc
  ec2_group:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ region }}"
    state: "{{ state }}"
    name: "{{ security_group_name }}"
    description: "{{ security_group_name }}"
    tags:
      Name: "{{ security_group_name  }}"
    rules:
    - proto: tcp
      ports:
      - 80
      cidr_ip: "{{ port80CidrBlock }}"
      rule_desc: allow all on port 80
    - proto: tcp
      ports:
      - 22
      cidr_ip: "{{ port22CidrBlock }}"
      rule_desc: allow all on port 22
  register: security_group_results

- name: create ec2 VPC Network access control list
  # create the access control list with ingress and egress ports 
  ec2_vpc_nacl:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ region }}"
    state: "{{ state }}"
    name: "{{ acl_name }}"
    subnets: [ "{{ subnet_result.subnet.id }}" ]
    tags:
      Name: "{{ acl_name }}"
      Description: "{{ acl_name }}"

    # ingress acl rules
    ingress:
      # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
      # allow ingress port 22
      - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
      # allow ingress port 80
      - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
      # allow icmp
      - [300, 'icmp', 'allow', "{{ destinationCidrBlock }}", 0, 8]
      # allow ingress ephemeral ports
      - [400, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]
    # egress acl rules
    egress:
      # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
      # allow egres port 22 
      - [100, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 22, 22]
      # allow egres port 80 
      - [200, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 80, 80]
      # allow egress ephemeral ports
      - [300, 'tcp', 'allow', "{{ destinationCidrBlock }}", null, null, 1024, 65535]
  register: acl_results

- name: create ec2 VPC public subnet route table
  # create route table and connect subnet to routes
  ec2_vpc_route_table:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ region }}"
    state: "{{ state }}"
    tags:
      Name: "{{ route_table_name }}"
    subnets: [ "{{ subnet_result.subnet.id }}" ]    
    # create routes
    routes:
      - dest: "{{ destinationCidrBlock }}" 
        gateway_id: "{{ igw_result.gateway_id }}"
  register: public_route_table

- name: Create an EC2 Key Pair
  ec2_key:
    name: flask-webserver-keypair
    region: "{{ region }}"
  register: ec2_key

# - name: Save Private Key Details
#   copy:
#     content: "{{ ec2_key.key.name }}"
#     dest: "{{ playbook_dir }}/aws-private.pem"
#     mode: 0600

# - command: "ssh-add {{ playbook_dir }}/aws-private.pem"  
#   when: ec2_key.changed

- set_fact:
    private_key: "{{ ec2_key.key.name }}"
  when: not private_key

- name: Launch an EC2 instance
  ec2_instance:
    key_name: "{{ private_key }}"
    instance_type: "{{ instance_type }}"
    image_id: "{{ image1 }}"
    wait: true
    region: "{{ region }}"
    network:
      assign_public_ip: yes
      security_group: "{{ security_group_name }}"
      vpc_subnet_id: "{{ subnet_name }}"
    tags:
      ec2: ec2_a
  register: ec2

- name: Add new instance to host group
  add_host:
    hostname: "{{ item.public_ip_address }}"
    groupname: launched
  with_items: "{{ ec2.instances }}"
  tags: ec2

- name: Wait for SSH to come up
  wait_for:
    host: "{{ item.public_dns_name }}"
    port: 22
    delay: 20
    timeout: 320
    state: started
  with_items: "{{ ec2.instances }}"
  tags: ec2
